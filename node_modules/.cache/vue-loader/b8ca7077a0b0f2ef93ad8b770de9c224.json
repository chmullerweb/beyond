{"remainingRequest":"/Users/paloma/Descodeuses/beyond/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/paloma/Descodeuses/beyond/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/paloma/Descodeuses/beyond/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paloma/Descodeuses/beyond/src/pages/mentions.vue?vue&type=template&id=181a5066&","dependencies":[{"path":"/Users/paloma/Descodeuses/beyond/src/pages/mentions.vue","mtime":1599035709629},{"path":"/Users/paloma/Descodeuses/beyond/node_modules/cache-loader/dist/cjs.js","mtime":1599035638508},{"path":"/Users/paloma/Descodeuses/beyond/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1599035704566},{"path":"/Users/paloma/Descodeuses/beyond/node_modules/cache-loader/dist/cjs.js","mtime":1599035638508},{"path":"/Users/paloma/Descodeuses/beyond/node_modules/vue-loader/lib/index.js","mtime":1599035704531}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}